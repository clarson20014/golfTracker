/**************************************************************************/
/*! 
    @file     readMifare.pde
    @author   Adafruit Industries
	@license  BSD (see license.txt)

    This example will wait for any ISO14443A card or tag, and
    depending on the size of the UID will attempt to read from it.
   
    If the card has a 4-byte UID it is probably a Mifare
    Classic card, and the following steps are taken:
   
    - Authenticate block 4 (the first block of Sector 1) using
      the default KEYA of 0XFF 0XFF 0XFF 0XFF 0XFF 0XFF
    - If authentication succeeds, we can then read any of the
      4 blocks in that sector (though only block 4 is read here)
	 
    If the card has a 7-byte UID it is probably a Mifare
    Ultralight card, and the 4 byte pages can be read directly.
    Page 4 is read by default since this is the first 'general-
    purpose' page on the tags.


This is an example sketch for the Adafruit PN532 NFC/RFID breakout boards
This library works with the Adafruit NFC breakout 
  ----> https://www.adafruit.com/products/364
 
Check out the links above for our tutorials and wiring diagrams 
These chips use SPI or I2C to communicate.

Adafruit invests time and resources providing this open source code, 
please support Adafruit and open-source hardware by purchasing 
products from Adafruit!

*/
/**************************************************************************/
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_PN532.h>

// If using the breakout with SPI, define the pins for SPI communication.
#define PN532_SCK  (2)
#define PN532_MOSI (3)
#define PN532_SS   (4)
#define PN532_MISO (5)
int counter;
uint8_t playerCard[4] = { 153, 115, 33, 0 };
uint8_t driverCard[4] = { 53, 123, 88, 220 }; 
uint8_t threeWoodCard[4] = { 53, 214, 250, 97 }; 
uint8_t putterCard[4] = { 101, 229, 81, 220 }; 
uint8_t gapCard[4] = { 213, 210, 89, 220 }; 


// If using the breakout or shield with I2C, define just the pins connected
// to the IRQ and reset lines.  Use the values below (2, 3) for the shield!
#define PN532_IRQ   (2)
#define PN532_RESET (3)  // Not connected by default on the NFC Shield

// Uncomment just _one_ line below depending on how your breakout or shield
// is connected to the Arduino:

// Use this line for a breakout with a software SPI connection (recommended):
//Adafruit_PN532 nfc(PN532_SCK, PN532_MISO, PN532_MOSI, PN532_SS);

// Use this line for a breakout with a hardware SPI connection.  Note that
// the PN532 SCK, MOSI, and MISO pins need to be connected to the Arduino's
// hardware SPI SCK, MOSI, and MISO pins.  On an Arduino Uno these are
// SCK = 13, MOSI = 11, MISO = 12.  The SS line can be any digital IO pin.
//Adafruit_PN532 nfc(PN532_SS);

// Or use this line for a breakout or shield with an I2C connection:
Adafruit_PN532 nfc(PN532_IRQ, PN532_RESET);

#if defined(ARDUINO_ARCH_SAMD)
// for Zero, output on USB Serial console, remove line below if using programming port to program the Zero!
// also change #define in Adafruit_PN532.cpp library file
   #define Serial SerialUSB
#endif

void setup(void) {
  #ifndef ESP8266
    while (!Serial); // for Leonardo/Micro/Zero
  #endif
  Serial.begin(115200);
  Serial.println("");
  Serial.println("What a Beautiful Day for golfing at: Town and Country Golf Club!");
  Serial.println("It is currently 78 degrees and no rain is expected within the next 5 hours");
  Serial.println("Please swipe your recommendation card when ready");
  Serial.println("");

  Serial.println("");
//set serial1, write arduino read particle 
  nfc.begin();

  uint32_t versiondata = nfc.getFirmwareVersion();
  if (! versiondata) {
    Serial.print("Didn't find PN53x board");
    while (1); // halt
  }
  // Got ok data, print it out!
 // Serial.print("Found chip PN5"); Serial.println((versiondata>>24) & 0xFF, HEX); 
 //Serial.print("Firmware ver. "); Serial.print((versiondata>>16) & 0xFF, DEC); 
// Serial.print('.'); Serial.println((versiondata>>8) & 0xFF, DEC);
 
  // configure board to read RFID tags
  nfc.SAMConfig();
  
//  Serial.println("Waiting for club selection for SHOT #1 of HOLE #1...");
}

int f1;
void loop(void) {
  boolean success;
  uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer to store the returned UID
  uint8_t uidLength;                        // Length of the UID (4 or 7 bytes depending on ISO14443A card type)

success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength);

if (!success)
{
  Serial.println("fail");
  return;
}

handleRfid(uid);
delay(3000);
}  
void handleRfid(uint8_t uid[]) {
    // if player card, suggest
    // suggestClub()
    // if club, increment stroke
    // useClub()
  //  Serial.println("Found a card!");
  //  Serial.print("UID Length: ");Serial.print(4, DEC);Serial.println(" bytes");
 //   Serial.print("UID Value: ");
    for (uint8_t i=0; i < 4; i++) {
 //     Serial.print(" 0x");Serial.print(uid[i], DEC); 
    }
    Serial.println("");
    
    boolean isPlayerCard = compareRfid(playerCard, uid);
    if (isPlayerCard){
      Serial.println("---Caddie Recommendation---");
      Serial.println("479 Yards, use your 10.0 DEGREE DRIVER"); 
      Serial.println("Waiting for club selection for SHOT #1 of HOLE #1...");     
    } else {
      boolean isDriver = compareRfid(driverCard, uid);
      if (isDriver) {
        Serial.println("You selected your: Driver");
        Serial.println("This is the recommended club, way to follow your caddie recommendation!");
        Serial.println("This club typically goes 265 yards, it will leave you with 214 yards to the hole");
	Serial.println("--- Calculating Distance ---");
	delay(2000);
	Serial.println("You hit your Driver: 260 Yards!");
	Serial.println("---Caddie Recommendation---");
     	Serial.println("319 Yards remaining, use your 3 Wood"); 
  	Serial.println("Waiting for club selection for SHOT #2 of HOLE #1..."); 
      } else {
        boolean isThreeWood = compareRfid(threeWoodCard, uid);
        if (isThreeWood) {
          Serial.println("You selected your: 3 Wood");
	  Serial.println("---Caddie Recommendation---");
          Serial.println("Slight wind from South at 4mph, should not affect your shot.");
          Serial.println("This club typically goes 225 yards, it will leave you with -6 yards to the hole");
	  Serial.println("--- Calculating Distance ---");
	  delay(3000);
	  Serial.println("Result: Distance 225, 119 Remain, use Gap Wedge");
	  Serial.println("Waiting for club selection for SHOT #3 of HOLE #1...");  
        } else {
          boolean isGap = compareRfid(gapCard, uid);
          if (isGap) {
            Serial.println("You selected your: Gap Wedge");
            Serial.println("This club typically goes 115 yards, it should put you on the green");
	    Serial.println("Hit when ready");
	    Serial.println("");
	    Serial.println("Result: Distance 115, 24 feet to pin, use your putter");
	    Serial.println("Waiting for club selection for SHOT #4 of HOLE #1...");
         } else {
          boolean isPutter = compareRfid(putterCard, uid);
          if (isPutter) {
            Serial.println("You selected your: Putter");
            Serial.print("Please enter the number of putts when finished.  Putts: ");
	    delay(2000);
	    Serial.println("2");
            Serial.println("Par was 4, you used 5 strokes, +1 Bogey");
	    delay(3000);
	    Serial.println("---Caddie Recommendation---");
	    Serial.println("Welcome to Hole #2");
     	    Serial.println("219 Yard par 3, use your 5 Iron"); 
      	    Serial.println("Waiting for club selection for SHOT #2 of HOLE #1...");  
          }
         }
      }
        Serial.println("");
      }
    }
}

boolean compareRfid(uint8_t uid1[], uint8_t uid2[]) {
    // if array lengths are different, return false
    
    for (uint8_t i = 0; i < 4; i++) {
        if (uid1[i] != uid2[i]) {
            return false;
        }
    }
    
    return true;
}
